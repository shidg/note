#!/bin/bash
# dep_platform
# Modified by shidg,20170920

## sourcecode ##
# git@git.eg.com:soft/platform.git

## Dependencies ##
# git@git.eg.com:wzc3.0/common.git

#判断参数是否正确
CMD=`echo $(basename $0)`
if [ $# -lt 3 ];then
    cowsay -f tux "参数错误!"
    echo -e "Usage: $CMD [branch name] [depend_name_common]\nE.g:   dep_platform 1.0.26 3.0.1 3.0.1"
    exit
#elif ! [[ "$1" =~ ^[1-9]\.[0-9]\.[0-9][0-9]$ ]];then
#    echo -e "参数格式不正确"
#    exit
fi

# 加载全局变量
source ~/common.sh

# 有未定义的变量则退出脚本，防止误删根目录
set -u

# 遇到错误即退出脚本
trap 'ERRTRAP $LINENO' ERR

# Define Variables
DEFINE_VARIABLES

#Define system path
DEFINE_SYSTEM_PATH

START_TIME=`date "+%Y%m%d-%T"`
BRANCH_NAME=release_$1
DEPEND_NAME_COMMON=$2
DEPEND_NAME_ORDER=$3
BUILD_DIR=/Data/war/Platform/branch/${BRANCH_NAME}

# create dirs if not exist
[ ! -d ${BUILD_DIR} ] && mkdir -p ${BUILD_DIR}

#Begin
START_TIME=`date "+%Y%m%d-%T"`

# 切换到源代码目录
cd ${MANAGE_SOURCE_DIR}

# 删除上次部署残留的配置文件
DELETE_PROFILES

# 切换分支,更新代码
if [ "$(git rev-parse --abbrev-ref HEAD)" == "${BRANCH_NAME}" ];then 
    if eval NEW_COMMIT ${BRANCH_NAME};then
        git pull
    else
        eval EXIT_CONFIRMATION
    fi
else
    if git branch -vv | grep "${BRANCH_NAME}";then
        git checkout ${BRANCH_NAME}
        if  eval NEW_COMMIT ${BRANCH_NAME};then
            git pull
        else
            eval EXIT_CONFIRMATION 
        fi 
    else
        git pull && git checkout ${BRANCH_NAME}
    fi  
fi

# 获取代码提交详情
GET_CODE_VERSION

# 确认提交内容
echo 
echo -e "================= The last commition: ================"
echo "$GIT_MSG"
echo 
echo -e "=================  ==================  ================"

CONTINUE_CONFIRMATION


# 生成配置文件
GENERATE_PROFILES

# 修改配置文件
MODIFY_PROFILES

#判断目标服务器是否已定义
: ${REMOTE_SERVER:?"变量未定义或者值为空"}

#保障三台服务器代码版本一致
#if [ "$need" = "1" -a  -n "${LAST_DEPLOY_VERSION}" -a "${DEPLOY_VERSION}" = "${LAST_DEPLOY_VERSION}" ];then
#	echo "No change!"
#	exit
#elif [ "$need" != "1" -a  -n "${LAST_DEPLOY_VERSION}" -a "${DEPLOY_VERSION}" != "${LAST_DEPLOY_VERSION}" ];then
#	echo "Have new submission (${COMMIT_AUTHOR}),Please confirm!"
#	exit
#fi 

#: << BLOCK

# 解决依赖
echo -e "构建依赖: wzc3.0/common [branch: ${DEPEND_NAME_COMMON}]..."
cd ${WZC3_SOURCE_DIR}/common
git pull && git checkout ${DEPEND_NAME_COMMON}
if eval NEW_COMMIT ${DEPEND_NAME_COMMON};then
    git pull
fi
mvn clean install -Dmaven.test.skip=true


echo -e "构建依赖: Platform/manage-global-api"
cd ${MANAGE_SOURCE_DIR}/manage-global-api                                                  
mvn clean install -Dmaven.test.skip=true


#build war packages

   cd ${MANAGE_SOURCE_DIR}/wzc
   mvn clean package -Dmaven.test.skip=true

   cd ${MANAGE_SOURCE_DIR}/consumer-wap
   mvn clean package -Dmaven.test.skip=true

# delete old wars & move war to /Data/war/trunk
PROJS2=(manage-web consumer-app manage-metadata manage-report manage-orders manage-app wechat download manage-thirdparty consumer-wap)

rm -rf ${BUILD_DIR}/*

for PROJ in ${PROJS2[*]}
    do
        mv -f ${MANAGE_SOURCE_DIR}/${PROJ}/target/*war ${BUILD_DIR}
    done

#BLOCK
# rsync war to remote server
echo -e "Current version is ${DEPLOY_VERSION}\nUploading packages to ${REMOTE_ENV}(${REMOTE_SERVER}) ..." | pv -qL 50
sleep 2

rsync -az --delete --password-file=/etc/rsync.pass --progress ${BUILD_DIR}/ ${SYNC_USER}@${REMOTE_SERVER}::${RSYNC_MODULE}

#restart tomcat on $(REMOTE_SERVER)
ssh -p ${SSH_PORT} ${REMOTE_SERVER} "/Data/scripts/restart_tomcat.sh ${BRANCH_NAME} ${DEPLOY_VERSION}" 

END_TIME=`date "+%Y%m%d-%T"`

cat > /tmp/upinfo <<EOF
=========================
server:${REMOTE_ENV}
Start at:${START_TIME}
Finish at:${END_TIME}
$GIT_MSG
Current version:${DEPLOY_VERSION}
EOF

#log
cat /tmp/upinfo >> /Data/logs/deplog/dep_platform.log


cowsay -f small "Success!"

# Done

exit 0
