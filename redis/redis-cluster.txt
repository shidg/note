# redis 5.0之后将集群管理功能集中到了redis-cli命令中
# 通过 --cluster参数调用各项功能

## redis6.0.9 安装
# gcc版本不低于5.3,所以要先升级gcc

# 使用scl升级gcc
# 安装centos-release-scl
yum install centos-release-scl

# 安装gcc9.3
yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils
# 启用gcc9.3
scl enable devtoolset-9 bash
# 需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。
# 如果要长期使用gcc 9.3的话：
echo "source /opt/rh/devtoolset-9/enable" >>/etc/profile

# 下载redis-6.0.9
# 安装
tar zxvf redis-6.0.9.tar.gz && cd redis-6.0.9 && make && make PREFIX=/usr/local/redis install

echo madvise > /sys/kernel/mm/transparent_hugepage/enabled

# 创建目录
mkdir -p /usr/local/redis-cluster/{conf,data,log} \ 
&& mkdir /usr/local/redis-cluster/data/{6379,6378,6377,6376,6375,6374}

#配置文件，以6379.conf 为例

# 启动redis 实例
redis-server conf/6379.conf
redis-server conf/6378.conf
redis-server conf/6377.conf
redis-server conf/6376.conf
redis-server conf/6375.conf
redis-server conf/6374.conf

#创建集群
redis-cli --cluster create 192.168.33.10:6379 192.168.33.10:6378 192.168.33.10:6377 \
192.168.33.10:6376 192.168.33.10:6375 192.168.33.10:6374  --cluster-replicas 1 -a "123456"


# cluster模式至少6个节点，三主三从，可以是同一台机器上的多个实例，使用端口区分
# 安装完成后修改配置文件 redis.conf
# cluster-enabled yes
# cluster-config-file /etc/redis/nodes-6379.conf #该文件由redis自行管理，注意目录权限
# 启动各个节点


# 创建集群主节点
redis-cli --cluster create host1:port host2:port host3:port

# 添加从节点,并指定对应的主节点
# 若不使用--cluster-slave参数则添加为主节点
redis-cli --cluster add-node newhost:port existing_host:port  --cluster-slave --cluster-master-id <> 

# 查看集群状态
redis-cli --cluster check existing_host:port

# 重新分片
redis-cli --cluster reshard existing_host:port --cluster-from <id> --cluster-to <id> --cluster-slots <数量> 
# --cluster-yes                 #指定迁移时的确认输入
# --cluster-timeout <arg>       #设置migrate命令的超时时间
# --cluster-pipeline <arg>      #定义cluster getkeysinslot命令一次取出的key数量，不传的话使用默认值为10
# --cluster-replace             #是否直接replace到目标节点

# 删除节点 
redis-cli --cluster del-node existing_host:port  node_id




rebalance      host:port                                      #指定集群的任意一节点进行平衡集群节点slot数量
                 --cluster-weight <node1=w1...nodeN=wN>         #指定集群节点的权重
                 --cluster-use-empty-masters                    #设置可以让没有分配slot的主节点参与，默认不允许
                 --cluster-timeout <arg>                        #设置migrate命令的超时时间
                 --cluster-simulate                             #模拟rebalance操作，不会真正执行迁移操作
                 --cluster-pipeline <arg>                       #定义cluster getkeysinslot命令一次取出的key数量，默认值为10
                 --cluster-threshold <arg>                      #迁移的slot阈值超过threshold，执行rebalance操作
                 --cluster-replace                              #是否直接replace到目标节点
  add-node       new_host:new_port existing_host:existing_port  #添加节点，把新节点加入到指定的集群，默认添加主节点
                 --cluster-slave                                #新节点作为从节点，默认随机一个主节点
                 --cluster-master-id <arg>                      #给新节点指定主节点
  call           host:port command arg arg .. arg               #在集群的所有节点执行相关命令
  set-timeout    host:port milliseconds                         #设置cluster-node-timeout
  import         host:port                                      #将外部redis数据导入集群
                 --cluster-from <arg>                           #将指定实例的数据导入到集群
                 --cluster-copy                                 #migrate时指定copy
                 --cluster-replace                              #migrate时指定replace
