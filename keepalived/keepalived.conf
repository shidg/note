! Configuration File for keepalived
global_defs {
   router_id haproxy-2
   vrrp_skip_check_adv_addr

   # 关闭组播，开启单播
   # vrrp_strict
   vrrp_garp_interval 0
   vrrp_gna_interval 0
}

vrrp_script chk_haproxy {
   script "/usr/local/keepalived/scripts/chk_nginx.sh"
   interval 2
}

vrrp_instance VI_1 {
    state BACKUP
    interface ens32
    virtual_router_id 51
    nopreempt # 非抢占模式，该模式下两台机器的state均为BACKUP,仅router_id和priority不同
    priority 90
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        10.203.43.240/22
    }
}

virtual_server 10.203.43.240  {
	delay_loop 6
    # 算法
    lb_algo rr
    # LVS的模式
    lb_kind NAT
    # 子网掩码，这个掩码是VIP的掩码
    nat_mask 255.255.252.0
    # 持久连接超时时间
    persistence_timeout 50
    # 定义协议
    protocol TCP
    # 如果后端应用服务器都不可用，就会定向到那个服务器上
    sorry_server 192.168.200.200 1358
    # 后端应用服务器 IP PORT
    real_server 10.203.43.231  {
        # 权重
        weight 1
        # MSIC_CHECK|SMTP_CHEKC|TCP_CHECK|SSL_GET|HTTP_GET这些都是
        # 针对应用服务器做健康检查的方法
        MISC_CHECK {}
        # 用于检查SMTP服务器的
        SMTP_CHEKC {}

        # 如果应用服务器不是WEB服务器，就用TCP_CHECK检查
        TCP_CHECK {
        	# 向哪一个端口检查，如果不指定默认使用上面定义的端口
        	connect_port 80
          	# 向哪一个IP检测，如果不指定默认使用上面定义的IP地址
         	bindto 10.203.43.231
          	# 连接超时时间
          	connect_timeout 3
        }

        # 如果对方是HTTPS服务器就用SSL_GET方法去检查，里面配置的内容和HTTP_GET一样
        SSL_GET {}

        # 应用服务器UP或者DOWN，就执行那个脚本
        #notify_up "这里写的是路径，如果脚本后有参数，整体路径+参数引起来"
        #notify_down "/PATH/SCRIPTS.sh 参数"

        # 使用HTTP_GET方法去检查
        HTTP_GET {
            # 检测URL
            url {
              	# 具体检测哪一个URL
              	path /index.html
              	# 检测内容的哈希值
              	#digest 640205b7b0fc66c1ea91c463fac6334d
              	# 除了检测哈希值还可以检测状态码，比如HTTP的200 表示正常，两种方法二选一即可
              	status_code 200
            }
            # 向哪一个端口检查，如果不指定默认使用上面定义的端口
            connect_port 80
            # 向哪一个IP检测，如果不指定默认使用上面定义的IP地址
            bindto 10.203.43.233
            # 连接超时时间
            connect_timeout 3
            # 尝试次数
            nb_get_retry 3
            # 每次尝试之间间隔几秒
            delay_before_retry 3
        }
    }

    real_server 10.203.43.233 {
        weight 1
        HTTP_GET {
            url {
              	path /index.html
              	#digest 640205b7b0fc66c1ea91c463fac6334c
            }
            connect_timeout 3
            nb_get_retry 3
            delay_before_retry 3
        }
    }
}
