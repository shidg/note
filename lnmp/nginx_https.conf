# NGINX编译时必须包含了with-http_ssl_module
##生成ssl证书
#1. openssl genrsa -des3 -out server.key 1024
#2. openssl req -new -key server.key -out server.csr

#注意在步骤2的最后有一个询问challenge password的步骤,提示如下
#A challenge password []:
#An optional company name []:
#直接回车，务必不要设置密码，否则造成传输过程中nginx或apache无法读取证书内容，https连接无法建立

#3. openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
#4. cp server.key server.key.org
#5. openssl rsa -in server.key.org -out server.key #生成一个无密码的私钥，专门给apache或nginx使用的，因为传输过程中要使用私钥对客户端使用的公钥进行验证，匹配才允许传输,有密码会造成nginx无法读取私钥内容



server {  
        listen          443 ssl;  
        server_name     member.aoshiwei.com;  
   
        ### SSL log files ###  
        access_log      logs/ssl-access.log;  
        error_log       logs/ssl-error.log;  
        keepalive_timeout    60;  
   
        ### SSL cert files ###  
        ssl_certificate      ssl/aoshiwei.com.crt;  
        ssl_certificate_key  ssl/aoshiwei.com.key;  
        ### Add SSL specific settings here ###  
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
   
        ###  Limiting Ciphers ########################  
        keepalive_timeout    60;
        #ssl_protocols  SSLv2 SSLv3 TLSv1;
        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        #
        ##表示优先使用服务端加密套件。默认开启
        ssl_prefer_server_ciphers   on;

        ##############################################  

        if ( $fastcgi_script_name ~ \..*\/.*php )  {
                 return 403;
        }

        if (-d $request_filename){
            rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent;
        }
        
        location ~* \.(gif|jpg|png|swf|flv)$ {
            #valid_referers none blocked *.phpchina.com;
            #if ($invalid_referer) {
                #return 404;
            #}
             access_log off;
             expires 30d;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
                fastcgi_pass   127.0.0.1:9000;
                fastcgi_index  index.php;
                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                include        fastcgi_params;
                #有一些开发框架会根据 $_SERVER[‘HTTPS’] 这个 PHP 变量是否为 on 来判断当前的访问请求是否是使用 https。为此我们需要在 Nginx 配置文件中添加一句来设置这个变量
                fastcgi_param  HTTPS on;
                fastcgi_param  HTTP_SCHEME https;
        }
        access_log off;        
      } 

