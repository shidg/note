set nocompatible  "Use Vim defaults (much better!)
set bs=indent,eol,start  "allow backspacing over everything in insert mode
set viminfo='20,\"50 " read/write a .viminfo file, don't store more than 50 lines of registers

"Only do this part when compiled with support for autocommands
if has("autocmd")
  augroup redhat
  autocmd!
  " In text files, always limit the width of text to 78 characters
  autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
  " don't write swapfile on most commonly used directories for NFS mounts or USB sticks
  autocmd BufNewFile,BufReadPre /media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
  " start with spec file template
  autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif  != ""
      cs add 
   endif
   set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" 自定义前缀键,默认为 \
let mapleader=" "

" ========================
" 插件管理器: vim-plug
" ========================
call plug#begin('~/.vim/plugged')

" 项目目录浏览器
Plug 'preservim/nerdtree'

" Git 状态显示在 NERDTree 中
Plug 'Xuyuanp/nerdtree-git-plugin'

" 状态栏美化
Plug 'vim-airline/vim-airline'

" 智能补全和语言服务支持
"Plug 'neoclide/coc.nvim', {'branch': 'release'}

" 自动括号
Plug 'jiangmiao/auto-pairs'

" 快速注释
Plug 'tpope/vim-commentary'

" Git 行内变更提示
Plug 'airblade/vim-gitgutter'

" 实时语法检查和 lint（适用于 shell/python/yaml）
Plug 'dense-analysis/ale'

" Markdown 编辑增强
Plug 'preservim/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }

" YAML 缩进增强
Plug 'stephpy/vim-yaml'

" 模糊查找
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()

" ========================
" 基础设置
" ========================
syntax on
set number
set relativenumber
set tabstop=4 shiftwidth=4 expandtab
set autoindent smartindent
set clipboard=unnamedplus
"set mouse=a
filetype plugin indent on
set encoding=utf-8
set updatetime=300
set hidden
set pastetoggle=<F12>

" 创建新文件时，自动跳到文件最后一行，并进入插入模式
autocmd BufNewFile * normal G o

" ========================
" 快捷键绑定
" ========================

" 模糊查找文件
nnoremap <C-p> :Files<CR>

" 全文搜索
nnoremap <C-f> :Rg<CR>

" Normal 模式下按 Ctrl+S 保存
nmap <C-s> :w<CR>

" Insert 模式下Ctr+S保存，并自动返回插入符模式
imap <C-s> <Esc>:w<CR>a

" NERDTree 设置
" ========================
" 启动Vim自动打开NERDTree并跳转到右侧窗口
autocmd VimEnter * NERDTree | if winnr('$') > 1 | wincmd l | endif

" 快速打开和关闭NERDTree
nnoremap <C-n> :NERDTreeToggle<CR>

" 当使用快捷键打开NERDTree时，也自动跳转到右侧窗口
nnoremap <silent> <C-n> :NERDTreeToggle<CR>:wincmd l<CR>


" 自动关闭 Vim 如果只剩 NERDTree 窗口
autocmd BufEnter * if winnr('$') == 1 && &filetype == 'nerdtree' | quit | endif
let g:NERDTreeShowHidden=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeGitStatusUseNerdFonts=1
let g:NERDTreeAutoDeleteBuffer=1


" 定义函数：如果当前在NERDTree，就跳到右边，否则跳到NERDTree
function! ToggleNERDTreeFocus()
  if bufname('%') =~ 'NERD_tree_'
    wincmd p
  else
    if bufwinnr('NERD_tree_1') != -1
      exec bufwinnr('NERD_tree_1') . "wincmd w"
    else
      NERDTree
    endif
  endif
endfunction

nnoremap <leader>n :call ToggleNERDTreeFocus()<CR>



" ========================
" Airline 设置
" ========================
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='dark'

" ========================
" coc.nvim 设置
" ========================
" 安装后在 Vim 内执行 :CocInstall coc-pyright coc-sh
let g:coc_global_extensions = ['coc-pyright', 'coc-sh', 'coc-yaml', 'coc-json', 'coc-markdownlint']

" Tab 补全设置
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" ========================
" markdown-preview 设置
" ========================
let g:mkdp_auto_start = 0
let g:mkdp_auto_close = 1
nmap <leader>mp :MarkdownPreview<CR>
nmap <leader>mc :MarkdownPreviewStop<CR>

"========================
" yml设置
" =======================
"autocmd FileType yaml setlocal foldmethod=indent foldlevelstart=1

"========================
" ALE 设置
" ========================
let g:ale_fix_on_save = 1
let g:ale_linters = {
\   'python': ['flake8'],
\   'sh': ['shellcheck'],
\   'yaml': ['yamllint'],
\}

" ========================
" 分屏操作快捷键
" ========================


" --- 分屏 ---
"  水平分屏
nnoremap <leader>s :split<CR>

" 垂直分屏
nnoremap <leader>v :vsplit<CR>

" 水平分屏，不打开任何文件
nnoremap <leader>sn :new<CR>

" 垂直分屏，不打开任何文件
nnoremap <leader>vn :vnew<CR>

" --- 窗口切换 ---
"  切换到左边窗口
nnoremap <C-h> <C-w>h

" 切换到右边窗口
nnoremap <C-j> <C-w>j

" 切换到上边窗口
nnoremap <C-k> <C-w>k

" 切换到下边窗口
nnoremap <C-l> <C-w>l

" 窗口间循环切换
nnoremap <leader>ww <C-w>w

" --- 调整窗口大小 ---
nnoremap <A-Up>    :resize +2<CR>
nnoremap <A-Down>  :resize -2<CR>
nnoremap <A-Left>  :vertical resize -2<CR>
nnoremap <A-Right> :vertical resize +2<CR>
nnoremap <leader>= <C-w>=

" --- 关闭窗口 ---
nnoremap <leader>q :close<CR>



""定义函数SetTitle，自动插入文件头
func SetTitle()
    if &filetype == 'sh'
        call setline(1,"\#!/bin/bash")
        call append(line("."), "# File Name: -- ".expand("%")." --")
        call append(line(".")+1, "# author: -- shidegang --")
        call append(line(".")+2, "# Created Time: ".strftime("%Y-%m-%d %H:%M:%S"))

    elseif &filetype == 'python'
        call setline(1, "#!/usr/bin/env python")
        call append(line("."), "# -*- coding: utf-8 -*-")
        call append(line(".")+1, "'''")
        call append(line(".")+2, "author: -- shidegang --")
        call append(line(".")+3, "Created Time: ".strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".")+4, "'''")

    elseif &filetype == 'ruby'
       call setline(1,"#!/usr/bin/env ruby")
       call append(line("."),"# encoding: utf-8")
       call append(line(".")+1, "")
    else
       call setline(1,"/*************************************************************************")
       call append(line("."), "    > File Name: ".expand("%"))
       call append(line(".")+1, "  > Author: ")
       call append(line(".")+2, "  > Mail: ")
       call append(line(".")+3, "  > Created Time: ".strftime("%c"))
       call append(line(".")+4, " ************************************************************************/")
       call append(line(".")+5, "")
    endif

    if &filetype == 'java'
       call append(line(".")+6,"public class ".expand("%:r"))
       call append(line(".")+7,"")
    endif
endfunc




autocmd BufNewFile *.sh,*.java,*.py exec ":call SetTitle()"
autocmd BufNewFile,BufRead *.py
\set tabstop=4
\set softtabstop=4
\set shiftwidth=4
\set textwidth=79
\set expandtab
\set fileformat=unix

augroup DevAutoCmd
    autocmd!
    autocmd FileType sh,python,yaml,markdown setlocal formatoptions-=cro
    autocmd FileType sh,python setlocal expandtab tabstop=4 shiftwidth=4
    autocmd FileType yaml   setlocal ts=2 sw=2 expandtab
    autocmd BufNewFile * normal G o
    autocmd BufWritePre *.py %s/\s\+$//e
    autocmd BufWritePre *.sh %s/\s\+$//e
augroup END

" ========================
" 其他建议插件命令
" ========================
" :ALEFix                                             ← 手动格式化
